** Sectores:
1. Barra de Tragos y Vinos, en la Entrada
2. Barra de Ceveza Artesanal, en el Patio
3. Preparacion de Comida en la Cocina
4. Preparacion de Postres Artesanales en el Candy Bar

** Empleados:
1. Bartender
2. Cerveceros
3. Cocineros
4. Mozos
5. Socios (3)
6. Admin

Features:
- Lista de Pedidos Pendientes.
- Foto de la Mesa: Integrantes + Pedido.
- Codigo ID para Pedidos (alfa char 5).
- Estado del Pedido de Pendiente a "En Preparacion"
    con tiempo estimado en base a la Cant. de Empleados.
- Estado "Listo para servir" al terminar el Pedido.
- Los Socios pueden ver TODOS los Estados de los Pedidos-
- Codigo ID para Mesas (int 5).
- Obtener_Tiempo_Restante_Del_Pedido(ID Mesa, ID Pedido).
- Estados Mesas:
    1. Cliente Esperando Pedido.
    2. Cliente Comiendo.
    3. Cliente Pagando.
    4. Cerrada.
- Solo los Socios pueden Cerrar Mesas.
- Los otros Estados los gestiona el Mozos
- #Estado Mesa Comiendo->Pagando:
    Se habilita encuesta puntuación del 1 al 10 para:
    1. La mesa.
    2. El restaurante.
    3. El mozo.
    4. El cocinero.
    5. Se agrega seccion de comentarios.

** Admin
- Las querys son entre fechas o en una fecha:
    - Empleados:
    a- Los días y horarios que se ingresaron al sistema.
    b- Cantidad de operaciones de todos por sector.
    c- Cantidad de operaciones de todos por sector, listada por cada empleado.
    d- Cantidad de operaciones de cada uno por separado.
    e- Posibilidad de dar de alta a nuevos, suspenderlos o borrarlos.
    
    - Pedidos:
    a- Lo que más se vendió.
    b- Lo que menos se vendió.
    c- Los que no se entregaron en el tiempo estipulado.
    d- Los cancelados.

    - Mesas:
    a- La más usada.
    b- La menos usada.
    c- La que más facturó.
    d- La que menos facturó.
    e- La/s que tuvo la factura con el mayor importe.
    f- La/s que tuvo la factura con el menor importe.
    g- Lo que facturó entre dos fechas dadas.
    h- Mejores comentarios.
    i- Peores comentarios.

** Comanda:
- ID: alfanumerico char 5
1. Nombre del Cliente

*** Arquitectura de carpetas:

Sí, está bien tener una carpeta routes en lugar de una carpeta views. La carpeta routes es donde se definen las rutas de la aplicación. Las rutas son las direcciones URL que se mapean a acciones específicas del controlador.

En el caso de una aplicación REST, las rutas se utilizan para definir los endpoints de la API. Los endpoints son los puntos de entrada a la API.

La carpeta views es donde se almacenan las vistas de la aplicación. Las vistas son las plantillas HTML que se utilizan para mostrar los datos a los usuarios.

En el caso de una aplicación REST, las vistas no son necesarias. Las respuestas de la API se pueden generar directamente en el controlador.

Por lo tanto, tener una carpeta routes en lugar de una carpeta views es una práctica recomendada para las aplicaciones REST.

En el caso de tu aplicación, que es una aplicación REST, la estructura de directorios correcta sería la siguiente:

Trabajo Practico MVC/
├── app/
│   ├── controllers/
│   ├── middleware/
│   ├── models/
│   └── routes/
├── config/
├── database/
├── public/
│   └── index.php